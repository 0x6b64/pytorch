class GraphModule(torch.nn.Module):
    def forward(self, orig_arg_0, orig_arg_1, orig_arg_2):
        arg0: b8[], arg1: f32[s0, s0], arg2: f32[s0, s0], = fx_pytree.tree_flatten_spec([orig_arg_0, orig_arg_1, orig_arg_2], self._in_spec)
        # No stacktrace found for following nodes
        true_graph_0 = self.true_graph_0
        false_graph_0 = self.false_graph_0
        
        # File: /scratch/bahuang/work/repos/pytorch/example_control_flow.py:26, code: return cond(pred, self.true_fn, self.false_fn, [x, y])
        cond: f32[s0, s0] = torch.ops.cond(arg0, true_graph_0, false_graph_0, [(arg1, arg2)]);  arg0 = true_graph_0 = false_graph_0 = arg1 = arg2 = None
        return pytree.tree_unflatten([cond], self._out_spec)
        
    class wrapped(torch.nn.Module):
        def forward(self, flat_args):
            flat_args_1: f32[s0, s0], flat_args_2: f32[s0, s0], = fx_pytree.tree_flatten_spec([flat_args], self._in_spec)
            # File: /scratch/bahuang/work/repos/pytorch/example_control_flow.py:26, code: return cond(pred, self.true_fn, self.false_fn, [x, y])
            mul: f32[s0, s0] = torch.ops.aten.mul.Tensor(flat_args_1, flat_args_2);  flat_args_1 = flat_args_2 = None
            return pytree.tree_unflatten([mul], self._out_spec)
            
    class wrapped(torch.nn.Module):
        def forward(self, flat_args):
            flat_args_1: f32[s0, s0], flat_args_2: f32[s0, s0], = fx_pytree.tree_flatten_spec([flat_args], self._in_spec)
            # File: /scratch/bahuang/work/repos/pytorch/example_control_flow.py:26, code: return cond(pred, self.true_fn, self.false_fn, [x, y])
            add: f32[s0, s0] = torch.ops.aten.add.Tensor(flat_args_1, flat_args_2);  flat_args_1 = flat_args_2 = None
            return pytree.tree_unflatten([add], self._out_spec)
            
GraphModule(
    name='GraphModule',
    graph=Graph(
        inputs=[
            TensorArgument(name='arg0'),
            TensorArgument(name='arg1'),
            TensorArgument(name='arg2')
        ],
        outputs=[TensorArgument(name='cond')],
        nodes=[
            Node(
                op='call_function',
                target='<torch._ops.PyOperator object at 0x7fe67106f340>',
                args=[
                    Argument(as_tensor=TensorArgument(name='arg0')),
                    Argument(
                        as_gm=GraphModule(
                            name='wrapped',
                            graph=Graph(
                                inputs=[
                                    TensorArgument(name='flat_args_1'),
                                    TensorArgument(name='flat_args_2')
                                ],
                                outputs=[TensorArgument(name='mul')],
                                nodes=[
                                    Node(
                                        op='call_function',
                                        target='aten.mul.Tensor',
                                        args=[
                                            Argument(
                                                as_tensor=TensorArgument(
                                                    name='flat_args_1'
                                                )
                                            ),
                                            Argument(
                                                as_tensor=TensorArgument(
                                                    name='flat_args_2'
                                                )
                                            )
                                        ],
                                        kwargs={},
                                        outputs=[
                                            ReturnArgument(
                                                as_tensor=TensorArgument(
                                                    name='mul'
                                                )
                                            )
                                        ],
                                        metadata='Skipped'
                                    )
                                ],
                                ivalues=[
                                    IValue(
                                        name='flat_args_1',
                                        meta=TensorMeta(
                                            dtype=torch.float32,
                                            sizes=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_sym=s0)
                                            ],
                                            requires_grad=False,
                                            device=device(type='cpu'),
                                            strides=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_sym=1)
                                            ],
                                            storage_offset=SymInt(as_sym=0),
                                            layout=torch.strided
                                        )
                                    ),
                                    IValue(
                                        name='flat_args_2',
                                        meta=TensorMeta(
                                            dtype=torch.float32,
                                            sizes=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_sym=s0)
                                            ],
                                            requires_grad=False,
                                            device=device(type='cpu'),
                                            strides=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_sym=1)
                                            ],
                                            storage_offset=SymInt(as_sym=0),
                                            layout=torch.strided
                                        )
                                    ),
                                    IValue(
                                        name='mul',
                                        meta=TensorMeta(
                                            dtype=torch.float32,
                                            sizes=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_sym=s0)
                                            ],
                                            requires_grad=False,
                                            device=device(type='cpu'),
                                            strides=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_int=1)
                                            ],
                                            storage_offset=SymInt(as_int=0),
                                            layout=torch.strided
                                        )
                                    )
                                ],
                                symint_values={}
                            ),
                            metadata={},
                            parameters='Skipped',
                            buffers='Skipped'
                        )
                    ),
                    Argument(
                        as_gm=GraphModule(
                            name='wrapped',
                            graph=Graph(
                                inputs=[
                                    TensorArgument(name='flat_args_1'),
                                    TensorArgument(name='flat_args_2')
                                ],
                                outputs=[TensorArgument(name='add')],
                                nodes=[
                                    Node(
                                        op='call_function',
                                        target='aten.add.Tensor',
                                        args=[
                                            Argument(
                                                as_tensor=TensorArgument(
                                                    name='flat_args_1'
                                                )
                                            ),
                                            Argument(
                                                as_tensor=TensorArgument(
                                                    name='flat_args_2'
                                                )
                                            )
                                        ],
                                        kwargs={},
                                        outputs=[
                                            ReturnArgument(
                                                as_tensor=TensorArgument(
                                                    name='add'
                                                )
                                            )
                                        ],
                                        metadata='Skipped'
                                    )
                                ],
                                ivalues=[
                                    IValue(
                                        name='flat_args_1',
                                        meta=TensorMeta(
                                            dtype=torch.float32,
                                            sizes=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_sym=s0)
                                            ],
                                            requires_grad=False,
                                            device=device(type='cpu'),
                                            strides=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_sym=1)
                                            ],
                                            storage_offset=SymInt(as_sym=0),
                                            layout=torch.strided
                                        )
                                    ),
                                    IValue(
                                        name='flat_args_2',
                                        meta=TensorMeta(
                                            dtype=torch.float32,
                                            sizes=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_sym=s0)
                                            ],
                                            requires_grad=False,
                                            device=device(type='cpu'),
                                            strides=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_sym=1)
                                            ],
                                            storage_offset=SymInt(as_sym=0),
                                            layout=torch.strided
                                        )
                                    ),
                                    IValue(
                                        name='add',
                                        meta=TensorMeta(
                                            dtype=torch.float32,
                                            sizes=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_sym=s0)
                                            ],
                                            requires_grad=False,
                                            device=device(type='cpu'),
                                            strides=[
                                                SymInt(as_sym=s0),
                                                SymInt(as_int=1)
                                            ],
                                            storage_offset=SymInt(as_int=0),
                                            layout=torch.strided
                                        )
                                    )
                                ],
                                symint_values={}
                            ),
                            metadata={},
                            parameters='Skipped',
                            buffers='Skipped'
                        )
                    ),
                    Argument(
                        as_tensors=[
                            TensorArgument(name='arg1'),
                            TensorArgument(name='arg2')
                        ]
                    )
                ],
                kwargs={},
                outputs=[
                    ReturnArgument(as_tensor=TensorArgument(name='cond'))
                ],
                metadata='Skipped'
            )
        ],
        ivalues=[
            IValue(
                name='arg0',
                meta=TensorMeta(
                    dtype=torch.bool,
                    sizes=[],
                    requires_grad=False,
                    device=device(type='cpu'),
                    strides=[],
                    storage_offset=SymInt(as_sym=0),
                    layout=torch.strided
                )
            ),
            IValue(
                name='arg1',
                meta=TensorMeta(
                    dtype=torch.float32,
                    sizes=[SymInt(as_sym=s0), SymInt(as_sym=s0)],
                    requires_grad=False,
                    device=device(type='cpu'),
                    strides=[SymInt(as_sym=s0), SymInt(as_sym=1)],
                    storage_offset=SymInt(as_sym=0),
                    layout=torch.strided
                )
            ),
            IValue(
                name='arg2',
                meta=TensorMeta(
                    dtype=torch.float32,
                    sizes=[SymInt(as_sym=s0), SymInt(as_sym=s0)],
                    requires_grad=False,
                    device=device(type='cpu'),
                    strides=[SymInt(as_sym=s0), SymInt(as_sym=1)],
                    storage_offset=SymInt(as_sym=0),
                    layout=torch.strided
                )
            ),
            IValue(
                name='cond',
                meta=TensorMeta(
                    dtype=torch.float32,
                    sizes=[SymInt(as_sym=s0), SymInt(as_sym=s0)],
                    requires_grad=False,
                    device=device(type='cpu'),
                    strides=[SymInt(as_sym=s0), SymInt(as_int=1)],
                    storage_offset=SymInt(as_int=0),
                    layout=torch.strided
                )
            )
        ],
        symint_values={}
    ),
    metadata={},
    parameters='Skipped',
    buffers='Skipped'
)
